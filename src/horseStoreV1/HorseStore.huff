
//Interface 

#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() //0

#define macro MAIN() = takes(0) returns(0) {

    0x00       //[0]
    calldataload   //[calldata]
    0xe0     //[0xe0,calldata]
    shr     //[function_selector]
    dup1    //[function_selector,function_selector]
    __FUNC_SIG(updateHorseNumber)        //0xcdfead2e     //[0xcdfead2e,function_selector,function_selector]
    eq   //[0xcdfead2e==function_selector,function_selector]
    updateJump     //[updateHorseNumberPc,true/false,function_selector]
    jumpi         //[function_selector]
    //if not a valid function selector then we will not jump 
    __FUNC_SIG(readNumberOfHorses)                           //0xe026c017    //[0xe026c017,function_selector]
    eq   //[0xe026c017==function_selector]
    readJump    //[readHorseNumberPc,true/false]
    jumpi         //[]
    0x00 0x00 revert  //[]



    updateJump:
    SET_NUMBER_OF_HORSES()
    readJump:
    GET_NUMBER_OF_HORSES()


}



#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {


0x04  //[4]
calldataload  //[calldata-first4bytes]
[NUMBER_OF_HORSES_STORAGE_SLOT]   //[0,calldata-first4bytes ie the input value]
sstore //[]
stop


    
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {

[NUMBER_OF_HORSES_STORAGE_SLOT] //[0]
sload //[value]
0x00 //[0,value]
mstore //[]  //value is stored in memory
0x20 0x00 //[0,32]
return //[]  // returns the value and stops execution 

    
}